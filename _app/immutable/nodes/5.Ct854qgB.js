import{a as s,t as i,b as S}from"../chunks/u3dcRfK7.js";import"../chunks/DpGqoPGn.js";import{p as j,s as t,f as A,a as $,$ as B,n,c as r,r as l}from"../chunks/DzHGrAB7.js";import{h as R}from"../chunks/D6Xn1kCk.js";import{i as T}from"../chunks/BXGTo6GS.js";import{T as O,M as k}from"../chunks/CkTT6Usv.js";import{C as d}from"../chunks/C9G-SrNI.js";const C=""+new URL("../assets/picard.BCE9FR-6.png",import.meta.url).href,N=""+new URL("../assets/stats.BQ1zoFWo.png",import.meta.url).href;var F=i('<meta charset="utf-8"> <meta content="width=device-width, initial-scale=1" name="viewport"> <meta content="My journey exploring de-duplicating backup tools for Linux." name="description"> <meta content="Emery C" name="authors">',1),P=i("<pre><code>&gt; tree .git/objects/<br>.git/objects/<br>├── 00<br>│   └── 08ddfb587d55e9a126564eae4066a390475d54<br>├── 01<br>│   ├── 04d07c5d207cdb581f220b8f4af81447ead945<br>│   └── 7ee0f86b3058de597e3a4b83ab1694b8eebe9a<br>├── 03<br>│   ├── 9742ff5981144adfaf76cbd493fc2a0f014dc9<br>│   └── df00d989e539839f4f0e81e79144ecd4036f7d<br>├── 04<br>│   └── 14d94ad9de029a05a4501a1e373fee6d5d672a<br>├── 05<br>│   ├── 17c7ce5922c2ae8725a401796c0508bf160b33<br>.....</code></pre>"),M=i('<pre><code>&lbrace;<br>  <span style="color: #8b41b1">enable</span> <span style="color: #d73a49">=</span> <span style="color: #d73a49">true</span>;<br>  <span style="color: #8b41b1">instance</span>.<span style="color: #298e0d">"</span><span style="color: #298e0d">podvault-test</span><span style="color: #298e0d">"</span> <span style="color: #d73a49">=</span> &lbrace;<br>    <span style="color: #8b41b1">targetUrl</span> <span style="color: #d73a49">=</span> <span style="color: #298e0d">"</span><span style="color: #298e0d">scp:username@host:/mnt/nfs/backups/test</span><span style="color: #298e0d">"</span>;<br>    <span style="color: #8b41b1">root</span> <span style="color: #d73a49">=</span> <span style="color: #298e0d">"</span><span style="color: #298e0d">/home/USER/</span><span style="color: #298e0d">"</span>;<br>    <span style="color: #8b41b1">user</span> <span style="color: #d73a49">=</span> <span style="color: #298e0d">"</span><span style="color: #298e0d">USER</span><span style="color: #298e0d">"</span>; <span style="color: #8a8a8a"># use the ssh keys of this user</span><br>    <span style="color: #8b41b1">exclude</span> <span style="color: #d73a49">=</span> homeExcludes <span style="color: #298e0d">"</span><span style="color: #298e0d">USER</span><span style="color: #298e0d">"</span>;<br>  &rbrace;;<br>&rbrace;</code></pre>'),U=i(`<pre><code>services<span style="color: #d73a49">.</span>borgbackup<span style="color: #d73a49">.</span>jobs<span style="color: #d73a49">.</span><span style="color: #298e0d">"</span><span style="color: #298e0d">home-</span><em><span style="color: #298e0d">$&lbrace;</span></em><em><span style="color: #298e0d">myUser</span></em><em><span style="color: #298e0d">&rbrace;</span></em><span style="color: #298e0d">"</span> = <span style="color: #d73a49">rec</span> &lbrace;<br>  <span style="color: #8b41b1">paths</span> <span style="color: #d73a49">=</span> <span style="color: #298e0d">"</span><span style="color: #298e0d">/home/</span><em><span style="color: #298e0d">$&lbrace;</span></em><em><span style="color: #298e0d">myUser</span></em><em><span style="color: #298e0d">&rbrace;</span></em><span style="color: #298e0d">"</span>;<br><br>  <span style="color: #8a8a8a"># set the ssh private key for sshing to our repo without password</span><br>  <span style="color: #8a8a8a"># @</span><strong><span style="color: #8a8a8a">TODO</span></strong><span style="color: #8a8a8a"> this is the recommended way in the examples but it doesn't work???</span><br>  <span style="color: #8a8a8a">#environment.BORG_RSH = "ssh -i /home/$&lbrace;myUser&rbrace;/.ssh/id_ed25519";</span><br>  <span style="color: #8b41b1">user</span> <span style="color: #d73a49">=</span> myUser; <span style="color: #8a8a8a"># work around for now</span><br><br>  <span style="color: #8a8a8a"># set repo password</span><br>  <span style="color: #8b41b1">encryption</span>.<span style="color: #8b41b1">passCommand</span> <span style="color: #d73a49">=</span> <span style="color: #298e0d">"</span><span style="color: #298e0d">cat /path/to/passphrase_file</span><span style="color: #298e0d">"</span>;<br><br>  <span style="color: #8b41b1">repo</span> <span style="color: #d73a49">=</span> borgRepo;<br>  <span style="color: #8b41b1">encryption</span>.<span style="color: #8b41b1">mode</span> <span style="color: #d73a49">=</span> <span style="color: #298e0d">"</span><span style="color: #298e0d">repokey</span><span style="color: #298e0d">"</span>;<br>  <span style="color: #8b41b1">compression</span> <span style="color: #d73a49">=</span> <span style="color: #298e0d">"</span><span style="color: #298e0d">auto,zstd,3</span><span style="color: #298e0d">"</span>;<br>  <span style="color: #8b41b1">startAt</span> <span style="color: #d73a49">=</span> <span style="color: #298e0d">"</span><span style="color: #298e0d">daily</span><span style="color: #298e0d">"</span>;<br><br>  <span style="color: #8b41b1">patterns</span> <span style="color: #d73a49">=</span> home-patterns;<br><br>  <span style="color: #8a8a8a"># change snapshot args</span><br>  <span style="color: #8b41b1">extraCreateArgs</span> <span style="color: #d73a49">=</span> <span style="color: #8b41b1">[</span><br>    <span style="color: #8a8a8a"># make verbose so you can see its actually working with "journalctl -u borgbackup-job-home-USER.service -f"</span><br>    <span style="color: #298e0d">"</span><span style="color: #298e0d">--stats</span><span style="color: #298e0d">"</span><br>    <span style="color: #298e0d">"</span><span style="color: #298e0d">--info</span><span style="color: #298e0d">"</span><br>    <span style="color: #8a8a8a">#"--list" # view logs of files/folders found 'x' means file was excluded https://borgbackup.readthedocs.io/en/stable/usage/create.html#item-flags</span><br>    <span style="color: #298e0d">"</span><span style="color: #298e0d">--checkpoint-interval=600</span><span style="color: #298e0d">"</span> <span style="color: #8a8a8a"># The example in the wiki is wrong. You must use the = syntax instead of space or is crashes??</span><br>  <span style="color: #8b41b1">]</span>;<br><br>  <span style="color: #8a8a8a"># for docs run: borg help prune</span><br>  <span style="color: #8b41b1">prune</span>.<span style="color: #8b41b1">keep</span> <span style="color: #d73a49">=</span> &lbrace;<br>    <span style="color: #8b41b1">within</span> <span style="color: #d73a49">=</span> <span style="color: #298e0d">"</span><span style="color: #298e0d">1d</span><span style="color: #298e0d">"</span>; <br>    <span style="color: #8b41b1">daily</span> <span style="color: #d73a49">=</span> <span style="color: #b60157">1</span>; <br>    <span style="color: #8b41b1">weekly</span> <span style="color: #d73a49">=</span> <span style="color: #b60157">3</span>;<br>    <span style="color: #8b41b1">monthly</span> <span style="color: #d73a49">=</span> <span style="color: #d73a49">-</span><span style="color: #b60157">1</span>;  <span style="color: #8a8a8a"># Keep at least one archive for each month</span><br>  &rbrace;;<br>&rbrace;;</code></pre>`),E=i('<br style="margin-top: 9px;"> <!> <p>I hope this article helps anyone having issues with Duplicity that would open to trying out some of its more modern alternatives.</p> <p>When I first setup my Homelab around a old tower PC running TrueNAS Scale in 2023 I was ecstatic about the all the different things I could use it for. Chief among them being that I could try out this cool backup tool called <a href="https://Duplicity.us/">Duplicity</a> that I was told about in a Linux IT class. The instructor, a kind bearded fellow, truly every stereotype of a Linux admin boiled into one regaled how this tool could perform incremental backups and upload to even untrusted computers by encrypting the backups sent. To be exact, Duplicity uses the same tech as rsync to first make a full backup of the system followed by incremental backups that reference the previous backups. I thought the idea of sending only the data that changed in a snapshot was really cool for its speed and storage savings. Unfortunately, not having an extra computer at the time to use for backups prevented me from really pursuing it then.</p> <h3>Digging Myself Into a Hole</h3> <p>With my NAS running and an NFS share setup to a Debian VM I finally could see what this backup tool could do. On my main laptop at the time I was using NixOS ( <em>Shudders in terror</em> ) so I used the <span class="raw-inline"><code style="white-space: pre-wrap">services.duplicity</code></span> ( <a href="https://search.nixos.org/options?channel=25.05&amp;query=Duplicity">API</a> ) module which setups up systemd service for automatically running Duplicity backups. As far as anything Nix goes it went well and I had configured the service for daily backups. I could finally sit back in my chair satisfied that I was efficiently utilizing my new NAS with automatic incremental backups.</p> <p>Something I did notice that was odd was that this NixOS module didn’t allow you to create an arbitrary number of distinct Duplicity instances pointed to different root paths, just the one. So using the little Nix I knew I scrapped together my own bespoke module based on the original that could create multiple systemd services for distinct Duplicity jobs. Finally, once again, I could rest easy knowing that if in the future I needed distinct jobs I could ust this module to quickly add them.</p> <p>Then I actually used my laptop for some time and I noticed something. It was slow, I even tried using the experimental parallel uploads feature to no avail and exhausted all of the performance flags I could find. This was all despite my internet being more than fast enough to rsync or scp my files to my server without issue. Furthermore, whatever feature that allowed Duplicity to resume incomplete backups, like say if I put my laptop to sleep as you do on the regular seemed to not be working that well. I wouldn’t be shocked if this was a NixOS issue somehow. The bottom line was that between those two issues in the span of a month I couldn’t even finish the initial full upload Duplicity required before it could start using smaller incremental backups.</p> <p>To make matters worse I had a realization, while its configurable how often Duplicity does a full backups <strong>if you ever want to delete backups then you need to perform another full backup for the future incremental backups to then reference</strong> . Which means that I would need to do a full system backup at least somewhat regularly and I couldn’t seem to get it to happen once. After seeing this I gave up for the time being.</p> <h3>Digging Myself Into a Deeper Hole</h3> <p>At some point, I had started reading about this tool called <a href="https://ipfs.tech/">IPFS (Inter Planetary File System)</a> . Crypto web 3 nonsense aside I thought the tech was really cool. The TLDR is its a torrent like system for hosting data from peer to peer utilizing git object style storage in 256kb chunks. If you don’t know, git objects are stored using one big global namespace populated with the hash of each file, folder, etc, within it ( Example: <a href="#loc-1">Listing 1</a> ). These hashes then can be used to address data uniquely and verify its integrity. Within this storage style you also have the option to keep files as intact chunks like git does, or split them up like IFPS which needs to break up larger files so that chunks stay within a 256kb chunk size. Whats cool about storing data in these hashed chunks is that it automatically de-duplicates files and data within files (in the case of IPFS) because if <strong>two chunks have the same hash then we only need one of them.</strong></p> <figure id="loc-1"><!> <figcaption>Listing 1: Git Objects Example</figcaption></figure> <p>After reading up on this I thought this would make for a really good backup technology. It would de-duplicate just like Duplicity but in a much less rigid way because a backup would be made of many individual chunks as apposed to one giant blob of everything. This means that <strong>instead of needing to delete the entire full backup when you want to free up storage on the backup server you could just delete ONLY the individual chunks that are no longer needed</strong> while keeping the rest.</p> <p>So I created PodVault, a quick and dirty Python implementation that could split a target folder and its files recursively into chunks and upload them over ssh to a chunk based storage folder. It mostly worked but would need a lot more unit tests, refactoring, and caching before I could really rely on it. As a proof of concept though, it was a fun challenge take on with my limited free time. I walked away thinking that this style of storage would definitely make for a great backup system. Its just a shame (*sighs in retrospect*), no one had already created a tool that uses this storage style for de-duplicating backups already :)</p> <p>Once again I created a small NixOS module that would let me create a systemd service for it:</p> <!> <h3>Enlightenment</h3> <p>At this point, years had gone by with me not having a working automatic backup system and somehow I never once researched alternative tools to Duplicity. A tool, that first released in 2002, and frankly, thats on me. It turns out that since 2002, most people has moved on. Duplicity still exists and I’m sure works great for some people especially if they don’t have that much data but compared to the modern alternatives its been left in the dust feature wise.</p> <p>After stumbling upon some comments mentioning alternatives to Duplicity while doing some upgrades to my Homelab, here are the two most established backup tools I could find that fill Duplicity’s niche. Both of these tools have the same base capabilities like encryption, incremental snapshots, and compression of Duplicity but improve upon it several cool ways. This isn’t an exhaustive list or comparison of these two tools, I’m just pointing out that either of these tools are awesome coming from Duplicity:</p> <ul><li><a href="https://restic.net/">Restic</a></li> <li><a href="https://www.borgbackup.org/">Borg</a></li></ul> <p>Features found in both:</p> <ul><li><strong>Better Data De-Duplication</strong> - Data duplication is done in more individual chunks just like my PodVault, eliminating the need to re-upload full backups to delete data like Duplicity. ( <a href="https://restic.readthedocs.io/en/latest/100_references.html#backups-and-deduplication">Restic Chunks</a> , <a href="https://github.com/borgbackup/borg?tab=readme-ov-file#main-features">Borg Chunks</a> )</li> <li><strong>Mounting Backups</strong> - You can mount backups allowing you to browse and restore files even with a regular graphical file manager. I love this!!</li> <li><strong>Repository Server Options</strong> - Optionally, you can install a server version of the backup software ( <a href="https://github.com/restic/rest-server">Restic Server</a> , <a href="https://borgbackup.readthedocs.io/en/stable/usage/serve.html">Borg Server</a> ) to unlock more functionality like <span class="raw-inline"><code style="white-space: pre-wrap">append-only</code></span> repositories so if an attacker breaches your main computer they can’t remotely delete your backups.</li> <li><strong>Multi-Client Support</strong> - Multiple computers can upload data to the same backup repository allowing de-duplication between computer backups! This of course is only useful if you have similar files on both but is still very cool.</li></ul> <p>Also special mention that Restic even supports Windows and is being used by <a href="https://forum.restic.net/t/restic-in-cern-slides-on-fosdem24/7253">CERN</a> apparently.</p> <h3>Sweet Success</h3> <div class="row"><div class="col-xl-6"><div class="mb-3"><p>For me, naturally I had to choose Borg because *cough* resistance is futile.</p> <p>As for setting it up, I was pleasantly surprised to see that both the nix modules for BorgBackup and Restic support creating multiple instances/systemd services so I think the reason the Duplicity’ module doesn’t have that is probably due to the lack of interest in it. Once again after the regular NixOS shenanigans like the only <a href="https://nixos.wiki/wiki/Borg_backup">examples</a> I could find being broken I finally have working automatic backups to my NAS. If you’ve never had the pleasure of using one of these tools check out my stats in <a href="#loc-2">Figure 1</a> . Across all snapshots my repository is only 113GB and the latest one added just 1.45MB to the repository because only a few files have changed since yesterday.</p></div></div> <div class="col-xl-6"><div class="mb-3"><!> <figure id="loc-2"><!> <figcaption>Figure 1: Stats of My Borg Backup</figcaption></figure></div></div></div> <p><br style="margin-top: 20px;"></p> <p>Here is the jist of my config with the hacks I had to do:</p> <!> <p>I hope you enjoyed this journey exploring de-duplicating backup tools for Linux. Despite forgetting to do my research for years, I ultimately learned a lot more about what goes into designing one of these tools because it gave me an excuse to write a proof of concept one myself. Duplicity may have pioneered some features back in the day, but it has mighty competition that I would greatly recommend over it at this point.</p> <p>Have a great day and remember to backup your computer regardless of what tool you pick.</p> <br style="margin-top: 200px;">',1);function Y(v,I){j(I,!1);const u=Object.assign({"./picard.png":C,"./stats.png":N});T();var h=E();R(e=>{var o=F();B.title=`
    I was Almost Bamboozled by Automatic Backups
   `,n(6),s(e,o)});var y=t(A(h),2);O(y,{desc:"My journey exploring de-duplicating backup tools for Linux.",history:[{date:"2025-09-02",msg:"Created"}],words:1768,children:(e,o)=>{n();var a=S("I was Almost Bamboozled by Automatic Backups");s(e,a)},$$slots:{default:!0}});var p=t(y,20),x=r(p);d(x,{class:"raw-block",lang:"txt",children:(e,o)=>{var a=P();s(e,a)},$$slots:{default:!0}}),n(2),l(p);var b=t(p,8);d(b,{class:"raw-block",lang:"nix",children:(e,o)=>{var a=M();s(e,a)},$$slots:{default:!0}});var c=t(b,18),m=t(r(c),2),f=r(m),g=r(f);k(g,{get src(){return u["./picard.png"]}});var w=t(g,2),D=r(w);k(D,{get src(){return u["./stats.png"]}}),n(2),l(w),l(f),l(m),l(c);var _=t(c,6);d(_,{class:"raw-block",lang:"nix",children:(e,o)=>{var a=U();s(e,a)},$$slots:{default:!0}}),n(6),s(v,h),$()}export{Y as component};
